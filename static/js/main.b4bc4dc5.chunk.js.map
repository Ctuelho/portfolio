{"version":3,"sources":["serviceWorker.js","carousel.js","index.js"],"names":["Boolean","window","location","hostname","match","Carousel","props","state","currentImageIndex","frameUrl","imgUrls","leftArrowUrl","rightArrowUrl","nextSlide","bind","previousSlide","lastIndex","this","length","index","setState","className","clickFunction","url","React","Component","ImageSlide","src","alt","Arrow","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCfAC,G,wDAEF,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,kBAAmB,EACnBC,SAAUH,EAAMG,SAChBC,QAASJ,EAAMI,QACfC,aAAcL,EAAMK,aACpBC,cAAeN,EAAMM,eAGvB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAZL,E,4DAgBhB,IAAME,EAAYC,KAAKV,MAAMG,QAAQQ,OAAS,EACtCV,EAAsBS,KAAKV,MAA3BC,kBAEFW,EADyC,IAAtBX,EACSQ,EAAYR,EAAoB,EAElES,KAAKG,SAAS,CACZZ,kBAAmBW,M,kCAKrB,IAAMH,EAAYC,KAAKV,MAAMG,QAAQQ,OAAS,EACtCV,EAAsBS,KAAKV,MAA3BC,kBAEFW,EADmBX,IAAsBQ,EACb,EAAIR,EAAoB,EAE1DS,KAAKG,SAAS,CACZZ,kBAAmBW,M,+BAKrB,OACI,yBAAKE,UAAU,YAEX,kBAAC,EAAD,CACIC,cAAgBL,KAAKF,cACrBQ,IAAKN,KAAKV,MAAMI,eAGpB,kBAAC,EAAD,CAAYY,IAAKN,KAAKV,MAAMG,QAAQO,KAAKV,MAAMC,mBAAoBC,SAAUQ,KAAKV,MAAME,WAExF,kBAAC,EAAD,CACIa,cAAgBL,KAAKJ,UACrBU,IAAKN,KAAKV,MAAMK,qB,GApDbY,IAAMC,YA4DvBC,EAAa,SAAC,GAAa,IAAXH,EAAU,EAAVA,IAClB,OACI,yBAAKF,UAAU,eACX,yBAAKM,IAAKJ,EAAKK,IAAK,OAK1BC,EAAQ,SAAC,GAAD,IAAGP,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,IAAlB,OACV,yBACIF,UAAW,cACXS,QAAUR,GAEV,yBAAKK,IAAKJ,EAAKK,IAAK,OAIbvB,ICzEf0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAUxB,SAAU,kBAAmBC,QAAS,CAAC,mBAAoB,mBAAoB,mBAAoB,mBAAoB,oBAAqBE,cAAe,uBAAwBD,aAAc,yBAE7MuB,SAASC,eAAe,UAG1BJ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAUxB,SAAU,kBAAmBC,QAAS,CAAC,yBAA0B,yBAA0B,yBAA0B,0BAA2BE,cAAe,uBAAwBD,aAAc,yBAEjNuB,SAASC,eAAe,iBAG1BJ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAUxB,SAAU,kBAAmBC,QAAS,CAAC,oBAAqB,oBAAqB,oBAAqB,qBAAsBE,cAAe,uBAAwBD,aAAc,yBAE7LuB,SAASC,eAAe,WF0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b4bc4dc5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './carousel.css';\r\n\r\nclass Carousel extends React.Component {\r\n    \r\n    constructor (props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          currentImageIndex: 0,\r\n          frameUrl: props.frameUrl,\r\n          imgUrls: props.imgUrls,\r\n          leftArrowUrl: props.leftArrowUrl,\r\n          rightArrowUrl: props.rightArrowUrl,\r\n        };\r\n\r\n        this.nextSlide = this.nextSlide.bind(this);\r\n        this.previousSlide = this.previousSlide.bind(this);\r\n    }\r\n\r\n    previousSlide () {\r\n        const lastIndex = this.state.imgUrls.length - 1;\r\n        const { currentImageIndex } = this.state;\r\n        const shouldResetIndex = currentImageIndex === 0;\r\n        const index =  shouldResetIndex ? lastIndex : currentImageIndex - 1;\r\n    \r\n        this.setState({\r\n          currentImageIndex: index\r\n        });\r\n    }\r\n    \r\n     nextSlide () {\r\n        const lastIndex = this.state.imgUrls.length - 1;\r\n        const { currentImageIndex } = this.state;\r\n        const shouldResetIndex = currentImageIndex === lastIndex;\r\n        const index =  shouldResetIndex ? 0 : currentImageIndex + 1;\r\n    \r\n        this.setState({\r\n          currentImageIndex: index\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"carousel\">\r\n\r\n                <Arrow\r\n                    clickFunction={ this.previousSlide }\r\n                    url={this.state.leftArrowUrl}\r\n                />\r\n\r\n                <ImageSlide url={this.state.imgUrls[this.state.currentImageIndex]} frameUrl={this.state.frameUrl} />\r\n\r\n                <Arrow\r\n                    clickFunction={ this.nextSlide }\r\n                    url={this.state.rightArrowUrl}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ImageSlide = ({ url }) => {\r\n    return (\r\n        <div className=\"image-slide\">\r\n            <img src={url} alt =\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Arrow = ({ clickFunction, url }) => (\r\n    <div\r\n        className={\"slide-arrow\"}\r\n        onClick={ clickFunction }\r\n    >\r\n        <img src={url} alt =\"\"/>\r\n    </div>\r\n); \r\n\r\nexport default Carousel;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Carousel from './carousel';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Carousel frameUrl={\"./img/frame.png\"} imgUrls={['./img/arida1.png', './img/arida2.png', './img/arida3.png', './img/arida4.png', './img/arida5.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\n  </React.StrictMode>,\n  document.getElementById('arida')\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Carousel frameUrl={\"./img/frame.png\"} imgUrls={['./img/blankKnight1.png', './img/blankKnight2.png', './img/blankKnight3.png', './img/blankKnight4.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\n  </React.StrictMode>,\n  document.getElementById('blank-knight')\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Carousel frameUrl={\"./img/frame.png\"} imgUrls={['./img/carrot1.png', './img/carrot2.png', './img/carrot3.png', './img/carrot4.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\n  </React.StrictMode>,\n  document.getElementById('carrot')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}