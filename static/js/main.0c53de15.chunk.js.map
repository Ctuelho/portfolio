{"version":3,"sources":["serviceWorker.js","carousel.js","index.js"],"names":["Boolean","window","location","hostname","match","Carousel","props","state","currentImageIndex","frameUrl","imgUrls","leftArrowUrl","rightArrowUrl","timer","nextSlide","bind","previousSlide","this","interval","setInterval","incrementTimer","clearInterval","value","totalTime","setState","lastIndex","length","index","className","clickFunction","url","React","Component","ImageSlide","src","alt","Arrow","onClick","ReactDOM","render","StrictMode","document","getElementById","playing","loop","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c53de15.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './carousel.css';\r\n\r\nclass Carousel extends React.Component {\r\n    \r\n    constructor (props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          currentImageIndex: 0,\r\n          frameUrl: props.frameUrl,\r\n          imgUrls: props.imgUrls,\r\n          leftArrowUrl: props.leftArrowUrl,\r\n          rightArrowUrl: props.rightArrowUrl,\r\n          timer: 0\r\n        };\r\n\r\n        this.nextSlide = this.nextSlide.bind(this);\r\n        this.previousSlide = this.previousSlide.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.incrementTimer(1), 1000);\r\n      }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    incrementTimer(value){\r\n        var totalTime = this.state.timer + value;\r\n        if(totalTime >= 3){\r\n            this.nextSlide();\r\n        }else{\r\n            this.setState({\r\n                timer: totalTime\r\n              });\r\n        }\r\n    }\r\n\r\n    previousSlide () {\r\n        const lastIndex = this.state.imgUrls.length - 1;\r\n        const { currentImageIndex } = this.state;\r\n        const shouldResetIndex = currentImageIndex === 0;\r\n        const index =  shouldResetIndex ? lastIndex : currentImageIndex - 1;\r\n    \r\n        this.setState({\r\n          currentImageIndex: index,\r\n          timer: 0\r\n        });\r\n    }\r\n    \r\n     nextSlide () {\r\n        const lastIndex = this.state.imgUrls.length - 1;\r\n        const { currentImageIndex } = this.state;\r\n        const shouldResetIndex = currentImageIndex === lastIndex;\r\n        const index =  shouldResetIndex ? 0 : currentImageIndex + 1;\r\n    \r\n        this.setState({\r\n          currentImageIndex: index,\r\n          timer: 0\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"carousel\">\r\n\r\n                <Arrow\r\n                    clickFunction={ this.previousSlide }\r\n                    url={this.state.leftArrowUrl}\r\n                />\r\n\r\n                <ImageSlide url={this.state.imgUrls[this.state.currentImageIndex]} frameUrl={this.state.frameUrl} />\r\n\r\n                <Arrow\r\n                    clickFunction={ this.nextSlide }\r\n                    url={this.state.rightArrowUrl}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ImageSlide = ({ url }) => {\r\n    return (\r\n        <div className=\"image-slide\">\r\n            <img src={url} alt =\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Arrow = ({ clickFunction, url }) => (\r\n    <div\r\n        className={\"slide-arrow\"}\r\n        onClick={ clickFunction }\r\n    >\r\n        <img src={url} alt =\"\"/>\r\n    </div>\r\n); \r\n\r\nexport default Carousel;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Carousel from './carousel';\r\nimport ReactPlayer from 'react-player'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReactPlayer className='react-player' url='https://www.youtube.com/watch?v=Ues8-dUYecI'/>\r\n  </React.StrictMode>,\r\n  document.getElementById('pathlines')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReactPlayer className='react-player' url='https://youtu.be/M7zJXKHKDDg'/>\r\n  </React.StrictMode>,\r\n  document.getElementById('akumi-wars')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReactPlayer className='react-player' url='https://youtu.be/53DPw9dYZhc'/>\r\n  </React.StrictMode>,\r\n  document.getElementById('gomma')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReactPlayer className='react-player' url='https://youtu.be/ltGq1BUhrq4' playing loop/>\r\n  </React.StrictMode>,\r\n  document.getElementById('hungerfordungeon')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Carousel imgUrls={['./img/arida1.png', './img/arida2.png', './img/arida3.png', './img/arida4.png', './img/arida5.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('arida')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Carousel imgUrls={['./img/sinergia1.png', './img/sinergia2.png', './img/sinergia3.png', './img/sinergia4.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('games-sinergia')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Carousel imgUrls={['./img/bk1.png', './img/bk2.png', './img/bk3.png', './img/bk4.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('blank-knight')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Carousel imgUrls={['./img/carrot1.png', './img/carrot2.png', './img/carrot3.png', './img/carrot4.png']} rightArrowUrl={\"./img/rightArrow.png\"} leftArrowUrl={\"./img/leftArrow.png\"}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('carrot')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}